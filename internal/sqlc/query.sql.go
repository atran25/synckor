// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user (username, passwordHash, isActive, isAdmin) VALUES (?, ?, ?, ?) RETURNING id, username, passwordhash, isactive, isadmin
`

type CreateUserParams struct {
	Username     string
	Passwordhash string
	Isactive     bool
	Isadmin      bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Passwordhash,
		arg.Isactive,
		arg.Isadmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Passwordhash,
		&i.Isactive,
		&i.Isadmin,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, passwordhash, isactive, isadmin FROM user WHERE username = ?
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Passwordhash,
		&i.Isactive,
		&i.Isadmin,
	)
	return i, err
}
